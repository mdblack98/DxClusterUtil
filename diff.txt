commit 3cb9bfc1a10634e58b04e30037774b6b4f8be90d
Author: Michael Black <mdblack98@yahoo.com>
Date:   Fri Jan 3 23:21:06 2025 -0600

    Fix self spot
    Fix filters
    Cache no longer being cleared.
    Bad call cache resets on restart

diff --git a/App.config b/App.config
index c807aef..b1acea4 100644
--- a/App.config
+++ b/App.config
@@ -56,7 +56,7 @@
                 <value>0</value>
             </setting>
             <setting name="TimeIntervalForDump" serializeAs="String">
-                <value>3</value>
+                <value>60</value>
             </setting>
         </DXClusterUtil.Properties.Settings>
     </userSettings>
diff --git a/ClusterClient.cs b/ClusterClient.cs
index e9f260f..163a243 100644
--- a/ClusterClient.cs
+++ b/ClusterClient.cs
@@ -340,7 +340,11 @@ namespace DXClusterUtil
                         var comment = line.Substring(38, 20);
                         var time = line.Substring(70, 3); // use 10 minute cache
                         var key = freq + "|" + spot + "|" + time;
+                        string myTime = line.Substring(70, 4);
+                        if (DateTime.TryParseExact(myTime, "HHmm", null, System.Globalization.DateTimeStyles.None, out DateTime parsedTime))
+                        {
 
+                        }
                         if (!Int32.TryParse(line.AsSpan(73, 1), out int minute))
                         {
                             continue;
@@ -368,21 +372,23 @@ namespace DXClusterUtil
                             swork = line.Replace(sfreq, String.Format(CultureInfo.InvariantCulture, "{0,7:0.0}", ffreq), StringComparison.InvariantCulture);
                             key = ffreq + "|" + spot + "|" + time;
                         }
+                        // Don't remove good lookups from cache
                         if (minute != lastMinute)
                         {
                             int removeMinute = (minute + 1) % 10;
-                            // when the minute rolls over we remove the 10 minute old cache entries
-                            //cache.Clear();
-                            //lastTime = time;
+                            // when the minute rolls over we remove the 10 minute old bad cache entries
+                            // cache.Clear();
+                            // lastTime = time;
                             foreach (var m in cacheSpottedCalls.ToList())
                             {
-                                if (m.Value == removeMinute)
+                                if (m.Key.Contains("BAD",StringComparison.OrdinalIgnoreCase) && m.Value == removeMinute)
                                 {
                                     cacheSpottedCalls.Remove(m.Key);
                                 }
                             }
                             lastMinute = minute;
                         }
+                        
                         ++totalLines;
                         bool filteredOut = false;
                         char[] delim = [' '];
@@ -737,7 +743,7 @@ namespace DXClusterUtil
             GC.SuppressFinalize(this);
         }
 
-        [GeneratedRegex("-[0-9]-#")]
+        [GeneratedRegex("-[0-9]-#:")]
         private static partial Regex MyRegexSuffix();
         #endregion
     }
diff --git a/DXCluster.iss b/DXCluster.iss
index 9096ac0..1c2950c 100644
--- a/DXCluster.iss
+++ b/DXCluster.iss
@@ -2,7 +2,7 @@
 ; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
 
 #define MyAppName "DXCluster"
-#define MyAppVersion "241216"
+#define MyAppVersion "250101"
 #define MyAppPublisher "W9MDB"
 #define MyAppURL "https://github.com/mdblack98/DxClusterUtil"
 #define MyAppExeName "DXClusterUtil.exe"
diff --git a/DXCluster250101.exe b/DXCluster250101.exe
new file mode 100644
index 0000000..b4f9f01
Binary files /dev/null and b/DXCluster250101.exe differ
diff --git a/Form1.Designer.cs b/Form1.Designer.cs
index 972d1ae..baf5d71 100644
--- a/Form1.Designer.cs
+++ b/Form1.Designer.cs
@@ -238,7 +238,7 @@
             richTextBox1.Location = new System.Drawing.Point(7, 133);
             richTextBox1.Margin = new System.Windows.Forms.Padding(2);
             richTextBox1.Name = "richTextBox1";
-            richTextBox1.Size = new System.Drawing.Size(750, 139);
+            richTextBox1.Size = new System.Drawing.Size(750, 165);
             richTextBox1.TabIndex = 14;
             richTextBox1.Text = resources.GetString("richTextBox1.Text");
             richTextBox1.WordWrap = false;
@@ -387,7 +387,7 @@
             // 
             AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
             AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
-            ClientSize = new System.Drawing.Size(770, 275);
+            ClientSize = new System.Drawing.Size(770, 301);
             Controls.Add(numericUpDownCwMinimum);
             Controls.Add(checkBoxUSA);
             Controls.Add(comboBoxTimeIntervalForDump);
@@ -417,7 +417,7 @@
             Icon = (System.Drawing.Icon)resources.GetObject("$this.Icon");
             Margin = new System.Windows.Forms.Padding(4, 3, 4, 3);
             Name = "Form1";
-            Text = "DxClusterUtil 241220 by W9MDB";
+            Text = "DxClusterUtil 250101 by W9MDB";
             Activated += Form1_Activated;
             FormClosing += Form1_FormClosing;
             Load += Form1_Load;
diff --git a/Form1.cs b/Form1.cs
index bae5143..1f3a165 100644
--- a/Form1.cs
+++ b/Form1.cs
@@ -438,7 +438,7 @@ namespace DXClusterUtil
                         }
                         else if (!filtered && !clusterCached && !dxline && !badCall && !badCallCached && !tooWeak)
                         {
-                            AddToLog(richTextBox1, ss, myColor);
+                            AddToLog(richTextBox1, ss + " bad call cached", myColor);
                             //RichTextBoxExtensions.AppendText(richTextBox1, ss, myColor);
                             //richTextBox1.SelectionStart = richTextBox1.Text.Length;
                             //richTextBox1.ScrollToCaret();
@@ -451,16 +451,13 @@ namespace DXClusterUtil
                         {
                             myColor = Color.Red;
                             ++badCalls;
+                            ss += " bad call";
                         }
                         else if (badCallCached)
                         {
                             myColor = Color.IndianRed;
                             ++badCalls;
                         }
-                        else if (cachedQRZ)
-                        {
-                            myColor = Color.Green;
-                        }
                         else if (s.Contains(textBoxCallsign.Text, StringComparison.InvariantCulture))
                         {
                             myColor = Color.Blue;
@@ -468,12 +465,23 @@ namespace DXClusterUtil
                         }
                         else if (tooWeak)
                         {
-                            myColor = Color.LightBlue;
+                            myColor = Color.DarkGoldenrod;
                             ss += " too weak";
                         }
+                        else if (ss.Substring(0, 2) != "DX" && !ss.Contains("review",StringComparison.OrdinalIgnoreCase))
+                        {
+                            myColor = Color.MediumBlue;
+                            ss += " filtered";
+                        }
+                        else if (cachedQRZ)
+                        {
+                            myColor = Color.Green;
+                            ss += " cached QRZ";
+                        }
                         else
                         {
-                            myColor = Color.Orange;
+                            myColor = Color.Black;
+                            ss += " new QRZ";
                         }
                         labelQRZCache.Text = "" + qrz?.cacheQRZ.Count + "/" + badCalls;
                         labelClusterCache.Text = "" + clusterClient.cacheSpottedCalls.Count;
@@ -512,6 +520,7 @@ namespace DXClusterUtil
                 {
                     labelStatusQServer.BackColor = qServerBackColor;
                     labelStatusQServer.Text = "Client Connected";
+                    
                 }
                 else
                 {
@@ -586,6 +595,10 @@ namespace DXClusterUtil
                 Properties.Settings.Default.Cached = checkBoxCached.Checked;
                 Properties.Settings.Default.Filtered = checkBoxFiltered.Checked;
                 Properties.Settings.Default.USA = checkBoxUSA.Checked;
+                //var myIndex = comboBoxTimeIntervalForDump.SelectedIndex;
+                //ComboBox.ObjectCollection items = comboBoxTimeIntervalForDump.Items;
+                //int myItem = Int32.Parse(items?[myIndex]);
+                //Properties.Settings.Default.TimeIntervalForDump = myItem;
                 Properties.Settings.Default.TimeIntervalForDump = comboBoxTimeIntervalForDump.SelectedIndex;
                 Properties.Settings.Default.TimeIntervalAfter = comboBoxTimeIntervalAfter.SelectedIndex;
                 Properties.Settings.Default.CWMinimum = (int)numericUpDownCwMinimum.Value;
@@ -1087,7 +1100,7 @@ namespace DXClusterUtil
                 checkBoxCached.Checked = Properties.Settings.Default.Cached;
                 checkBoxFiltered.Checked = Properties.Settings.Default.Filtered;
                 checkBoxUSA.Checked = Properties.Settings.Default.USA;
-                comboBoxTimeIntervalForDump.SelectedIndex = comboBoxTimeIntervalForDump.FindStringExact(Properties.Settings.Default.TimeIntervalForDump.ToString(CultureInfo.InvariantCulture));
+                comboBoxTimeIntervalForDump.SelectedIndex = Properties.Settings.Default.TimeIntervalForDump;
                 comboBoxTimeIntervalAfter.SelectedIndex = Properties.Settings.Default.TimeIntervalAfter;
                 numericUpDownCwMinimum.Value = Properties.Settings.Default.CWMinimum;
             }
diff --git a/Properties/Settings.Designer.cs b/Properties/Settings.Designer.cs
index e60cdae..e235558 100644
--- a/Properties/Settings.Designer.cs
+++ b/Properties/Settings.Designer.cs
@@ -12,7 +12,7 @@ namespace DXClusterUtil.Properties {
     
     
     [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
-    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.12.0.0")]
+    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.13.0.0")]
     internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
         
         private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
@@ -217,7 +217,7 @@ namespace DXClusterUtil.Properties {
         
         [global::System.Configuration.UserScopedSettingAttribute()]
         [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
-        [global::System.Configuration.DefaultSettingValueAttribute("3")]
+        [global::System.Configuration.DefaultSettingValueAttribute("60")]
         public int TimeIntervalForDump {
             get {
                 return ((int)(this["TimeIntervalForDump"]));
diff --git a/Properties/Settings.settings b/Properties/Settings.settings
index eeb5315..8c92263 100644
--- a/Properties/Settings.settings
+++ b/Properties/Settings.settings
@@ -51,7 +51,7 @@
       <Value Profile="(Default)">0</Value>
     </Setting>
     <Setting Name="TimeIntervalForDump" Type="System.Int32" Scope="User">
-      <Value Profile="(Default)">3</Value>
+      <Value Profile="(Default)">60</Value>
     </Setting>
   </Settings>
 </SettingsFile>
\ No newline at end of file
diff --git a/QServer.cs b/QServer.cs
index d8dc8e3..cbbf00b 100644
--- a/QServer.cs
+++ b/QServer.cs
@@ -18,7 +18,7 @@ namespace DXClusterUtil
         readonly ConcurrentBag<string> spotQueue;
         bool running = false;
         bool stop = false;
-        bool connected;
+        bool connected = false;
         private TcpListener? listener;
         NetworkStream? stream;
         Thread? myThreadID;
@@ -47,7 +47,7 @@ namespace DXClusterUtil
                     return;
                 }
             }
-            connected = true;
+            connected = false;
         }
 
         ~QServer()
@@ -71,9 +71,10 @@ namespace DXClusterUtil
 
         void ReadThread()
         {
-            int? bytesRead = 0;
+            int bytesRead = 0;
             connected = true;
-            while (connected)
+            bool run = true;
+            while (run)
             {
                 try
                 {
@@ -82,19 +83,40 @@ namespace DXClusterUtil
                     {
                         networkStream.ReadTimeout = 5000; // Set timeout to 5000ms (5 seconds)
                     }
-                    bytesRead = stream?.Read(bytes, 0, bytes.Length);
-                    if (bytesRead.HasValue && bytesRead.Value == 0)
+                    /*
+                    if (stream is not null && stream.Socket.Available == 0)
+                    {
+                        Thread.Sleep(1000);
+                        connected = false;
+                        continue;
+                    }
+                    connected = true;
+                    */
+                    //if (stream?.DataAvailable == true)
+                    if (stream is not null)
+                    {
+                        bytesRead = (int)(stream.Read(bytes, 0, bytes.Length));
+                    }
+                    //else
+                    //{
+                    //    Thread.Sleep(1000);
+                    //    continue;
+                    //}
+                    //if (bytesRead.HasValue && bytesRead.Value == 0)
+                    if (bytesRead == 0)
                     {
                         connected = false; // mdb
-                        break;
+                        continue;
                     }
+                    /*
                     if (bytesRead is null)
                     {
 #pragma warning disable CA1303 // Do not pass literals as localized parameters
                         MessageBox.Show("bytesRead is null?");
 #pragma warning restore CA1303 // Do not pass literals as localized parameters
                     }
-                    if (bytesRead is not null)
+                    */
+                    //if (bytesRead is not null)
                     {
                         string cmd = Encoding.ASCII.GetString(bytes, 0, (int)bytesRead);
                         if (cmd.Contains("bye", StringComparison.InvariantCulture))
@@ -170,6 +192,7 @@ namespace DXClusterUtil
                 byte[] bytes;
                 while (running)
                 {
+                    if (myThreadID?.ThreadState == ThreadState.Stopped) myThreadID?.Start();
                     try
                     {
                         if (TimeInterval == 0) TimeInterval = 1;
@@ -255,6 +278,7 @@ namespace DXClusterUtil
                     }
                 }
                 stream?.Close();
+                stream = null;
                 if (client is not null && client.Connected) 
                     client?.Close();
                 connected = false;
