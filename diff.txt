commit 67c1eabf283e576a58b7983b44aad1bf14bb7a1f
Author: Michael Black <mdblack98@yahoo.com>
Date:   Mon Dec 9 08:09:35 2024 -0600

    Fix cw filter again and change mutex handling

diff --git a/ClusterClient.cs b/ClusterClient.cs
index 3b88d88..b65a11e 100644
--- a/ClusterClient.cs
+++ b/ClusterClient.cs
@@ -14,29 +14,29 @@ namespace DXClusterUtil
 {
     class ClusterClient: IDisposable
     {
-        public TcpClient client;
-        private NetworkStream nStream;
-        ConcurrentBag<string> log4omQueue;
+        public TcpClient? client;
+        private NetworkStream? nStream;
+        ConcurrentBag<string>? log4omQueue;
         readonly ConcurrentBag<string> clusterQueue;
-        public readonly Dictionary<string, int> cacheSpottedCalls = new();
+        public readonly Dictionary<string, int> cacheSpottedCalls = [];
         readonly string myHost;
         readonly int myPort;
-        RichTextBox myDebug;
-        string myCallsign;
+        RichTextBox? myDebug;
+        string? myCallsign;
         public UInt64 totalLines;
         public UInt64 totalLinesKept;
         private int lastMinute = 1; // for cache usage
         public bool filterOn = true;
         public bool filterUSA = false;
-        public HashSet<string> callSuffixList = new();
+        public HashSet<string> callSuffixList = [];
         public string reviewedSpotters = "";
         public string ignoredSpottersAndSpots = "";
         private readonly QRZ qrz;
         public bool debug = true;
         public float rttyOffset;
-        public ListBox listBoxIgnore;
+        public ListBox? listBoxIgnore;
         private readonly string logFile = Environment.ExpandEnvironmentVariables("%TEMP%\\DxClusterUtil_Log.txt");
-        Mutex mutex = new(true);
+        readonly Mutex mutex = new(true);
         public int numericUpDownCwMinimum = 0;
 
         private readonly string pathQRZError = Environment.ExpandEnvironmentVariables("%TEMP%\\DxClusterUtil_qrzerror.txt");
@@ -85,7 +85,7 @@ namespace DXClusterUtil
 
         private bool Connect()
         {
-            if (!Connect(myCallsign,myDebug,log4omQueue))
+            if (myCallsign is null || myDebug is null || log4omQueue is null || !Connect(myCallsign,myDebug,log4omQueue))
             {
                 return false;
             }
@@ -108,9 +108,10 @@ namespace DXClusterUtil
             {
                 File.AppendAllText(logFile, "Logging started\r\n");
             }
-#pragma warning disable CA1031 // Do not catch general exception types
-            catch { }
-#pragma warning restore CA1031 // Do not catch general exception types
+            catch 
+            {
+                throw;
+            }
             do 
             {
                 try
@@ -232,17 +233,18 @@ namespace DXClusterUtil
                 debuglog.AppendText("qrz client is " + s1);
                 return null;
             }
-            if (clusterQueue.TryTake(out string result))
+            if (clusterQueue.TryTake(out string? result))
             {
                 var outmsg = Encoding.ASCII.GetBytes(result);
-                nStream.Write(outmsg, 0, outmsg.Length);
+                nStream?.Write(outmsg, 0, outmsg.Length);
             }
             if (client == null) { 
                 return null; 
             }
+            mutex.WaitOne();
             if (client.Connected && nStream != null && nStream.DataAvailable)
             {
-                while (clusterQueue.TryTake(out string command))
+                while (clusterQueue.TryTake(out string? command))
                 {
                     var outmsg = Encoding.ASCII.GetBytes(command);
                     nStream.Write(outmsg, 0, outmsg.Length);
@@ -258,6 +260,7 @@ namespace DXClusterUtil
                     }
                     catch (IOException)
                     {
+                        mutex.ReleaseMutex();
                         return null;
                     }
                 } while (c != '\n');
@@ -294,7 +297,7 @@ namespace DXClusterUtil
                 } while (worked == false);
                 //Int32 bytesRead = nStream.Read(databuf, 0, databuf.Length);
                 //var responseData = System.Text.Encoding.ASCII.GetString(databuf, 0, bytesRead);
-                char[] sep = { '\n', '\r' };
+                char[] sep = ['\n', '\r'];
                 //ss = "DX de W3LPL-3:    3584.3  PJ5/KG9N     RTTY Heard in AZ and MA        1311Z";
                 var tokens = ss.Split(sep);
                 string sreturn = "";
@@ -302,6 +305,7 @@ namespace DXClusterUtil
                 {
                     Disconnect();
                     Connect();
+                    mutex.ReleaseMutex();
                     return null;
                 }
                 foreach (string line in tokens)
@@ -348,7 +352,7 @@ namespace DXClusterUtil
                         }
                         ++totalLines;
                         bool filteredOut = false;
-                        char[] delim = { ' ' };
+                        char[] delim = [' '];
                         string[] tokens2 = line.Split(delim, StringSplitOptions.RemoveEmptyEntries);
                         string spotterCall = "";
                         string spottedCall = "";
@@ -364,11 +368,17 @@ namespace DXClusterUtil
                         {
                             spotterCall = Regex.Replace(tokens2[2], "-#:", "");
                         }
-                        if (tokens2.Length < 4) return line;
+                        if (tokens2.Length < 4)
+                        {
+                            mutex.ReleaseMutex();
+                            return line;
+                        }
                         myCallsignExists = false;
                         spottedCall = tokens2[4];
-                        if (listBoxIgnore.Items.Contains(spottedCall))
+                        if (listBoxIgnore is not null && listBoxIgnore.Items.Contains(spottedCall))
                         {
+                            mutex.ReleaseMutex();
+
                             return "Ignoring " + spottedCall + "\r\n";
                         }
                         // Remove any suffix from special callsigns
@@ -404,23 +414,24 @@ namespace DXClusterUtil
                         }
                         bool tooWeak = false;
                         if (skimmer) { // filter out CW below minimum dB level
-                            mutex.WaitOne();
                             if (Form1.TryParseSignalStrength(ss, out var signalStrength))
                             {
                                 if (signalStrength < numericUpDownCwMinimum)
                                 {
                                     filteredOut = true;
                                     tooWeak = true;
+                                    ss = swork.Replace("DX de", "<< de", StringComparison.InvariantCulture);
+                                    mutex.ReleaseMutex();
+                                    return ss;
                                 }
                             }
-                            mutex.ReleaseMutex();
                         }
                         bool validCall = qrz.GetCallsign(spottedCall, out cachedQRZ);
                         if (!tooWeak && validCall && !filteredOut) // if it's not a skimmer just let it through as long as valid call and hasn't been excluded
                         {
                             ++totalLinesKept;
                             // we may have changed the freq so we add the change to log4omQueue
-                            log4omQueue.Add(swork + "\r\n");
+                            log4omQueue?.Add(swork + "\r\n");
                             try
                             {
                                 File.AppendAllText(logFile, swork + "\r\n");
@@ -441,6 +452,7 @@ namespace DXClusterUtil
 #pragma warning restore CA1031 // Do not catch general exception types
                             }
                             sreturn += swork + "\r\n";
+                            mutex.ReleaseMutex();
                             return sreturn;
                         }
                         bool isClusterServerCached = cacheSpottedCalls.ContainsKey(key);
@@ -459,7 +471,7 @@ namespace DXClusterUtil
                             }
                             else
                             {
-                                log4omQueue.Add(swork + "\r\n");
+                                log4omQueue?.Add(swork + "\r\n");
                                 try
                                 {
                                     File.AppendAllText(logFile, swork + "\r\n");
@@ -482,10 +494,10 @@ namespace DXClusterUtil
                             }
                             sreturn += sss + "\r\n";
                         }
-                        else if (swork.Contains(myCallsign, StringComparison.InvariantCulture))  // allow our own spots through too
+                        else if (myCallsign is not null && swork.Contains(myCallsign, StringComparison.InvariantCulture))  // allow our own spots through too
                         {
                             ++totalLinesKept;
-                            log4omQueue.Add(swork + "\r\n");
+                            log4omQueue?.Add(swork + "\r\n");
                             try
                             {
                                 File.AppendAllText(logFile, swork + "\r\n");
@@ -521,7 +533,7 @@ namespace DXClusterUtil
                                 if (qrz.isOnline == false)
                                 {
                                     tag = "ZZ"; // show QRZ is sleeping
-                                    log4omQueue.Add("QRZ not responding?\n");
+                                    log4omQueue?.Add("QRZ not responding?\n");
                                     try
                                     {
                                         File.AppendAllText(logFile, line + "\r\n");
@@ -544,7 +556,7 @@ namespace DXClusterUtil
                                     }
                                     if (qrz.xmlError.Contains("Error", StringComparison.InvariantCulture))
                                     {
-                                        log4omQueue.Add(qrz.xmlError + "\n");
+                                        log4omQueue?.Add(qrz.xmlError + "\n");
                                         try
                                         {
                                             File.AppendAllText(logFile, line + "\r\n");
@@ -589,13 +601,14 @@ namespace DXClusterUtil
                         if (line.Length > 1) sreturn += line + "\r\n";
                     }
                 }
+                mutex.ReleaseMutex();
                 return sreturn;
             }
             try
             {
                 var msg = "";
                 var bytes = Encoding.ASCII.GetBytes(msg);
-                nStream.Write(bytes, 0, bytes.Length);
+                nStream?.Write(bytes, 0, bytes.Length);
             }
 #pragma warning disable CA1031 // Do not catch general exception types
             catch (Exception)
@@ -611,6 +624,7 @@ namespace DXClusterUtil
                     Thread.Sleep(60 * 1000); // 1 minute wait until retry
                 }
             }
+            mutex.ReleaseMutex();
             return null;
         }
 
@@ -634,7 +648,7 @@ namespace DXClusterUtil
         #region IDisposable Support
         private bool disposedValue = false; // To detect redundant calls
         public bool myCallsignExists;
-        internal string newSpotters;
+        internal string? newSpotters;
 
         protected virtual void Dispose(bool disposing)
         {
diff --git a/DXCluster.iss b/DXCluster.iss
index b44ab50..4b3210d 100644
--- a/DXCluster.iss
+++ b/DXCluster.iss
@@ -2,7 +2,7 @@
 ; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
 
 #define MyAppName "DXCluster"
-#define MyAppVersion "241207"
+#define MyAppVersion "241208"
 #define MyAppPublisher "W9MDB"
 #define MyAppURL "https://github.com/mdblack98/DxClusterUtil"
 #define MyAppExeName "DXClusterUtil.exe"
diff --git a/DXCluster241207.exe b/DXCluster241207.exe
index dd2392f..ac2f944 100644
Binary files a/DXCluster241207.exe and b/DXCluster241207.exe differ
diff --git a/DXCluster241208.exe b/DXCluster241208.exe
new file mode 100644
index 0000000..18b1989
Binary files /dev/null and b/DXCluster241208.exe differ
diff --git a/Form1.Designer.cs b/Form1.Designer.cs
index 35fb1ea..c9fc9c1 100644
--- a/Form1.Designer.cs
+++ b/Form1.Designer.cs
@@ -415,7 +415,7 @@
             Icon = (System.Drawing.Icon)resources.GetObject("$this.Icon");
             Margin = new System.Windows.Forms.Padding(4, 3, 4, 3);
             Name = "Form1";
-            Text = "DxClusterUtil 241208 by W9MDB";
+            Text = "DxClusterUtil 241209 by W9MDB";
             Activated += Form1_Activated;
             FormClosing += Form1_FormClosing;
             Load += Form1_Load;
diff --git a/Form1.cs b/Form1.cs
index 3136adb..76b82ac 100644
--- a/Form1.cs
+++ b/Form1.cs
@@ -21,13 +21,13 @@ namespace DXClusterUtil
 {
     public partial class Form1 : Form
     {
-        private static Form1 _instance;
-        private ClusterClient clusterClient;
-        readonly ConcurrentBag<string> clientQueue = new();
-        readonly ConcurrentBag<string> spotQueue = new();
-        QServer server;
+        private static Form1? _instance;
+        private ClusterClient? clusterClient;
+        readonly ConcurrentBag<string> clientQueue = [];
+        readonly ConcurrentBag<string> spotQueue = [];
+        QServer? server;
         readonly ToolTip tooltip = new() { ShowAlways = true };
-        private QRZ qrz;
+        private QRZ? qrz;
         private readonly string pathQRZCache = Environment.ExpandEnvironmentVariables("%TEMP%\\qrzcache.txt");
         private int badCalls;
         bool startupConnect = true;
@@ -38,14 +38,14 @@ namespace DXClusterUtil
         [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
         public int TimeIntervalAfter
         {
-            get { return server.TimeIntervalAfter; }
-            set { if (server != null) server.TimeIntervalAfter = value; Properties.Settings.Default.TimeIntervalAfter = value; }
+            get { if (server is not null) return server.TimeIntervalAfter; else return 0; }
+            set { if (server is not null) server.TimeIntervalAfter = value; Properties.Settings.Default.TimeIntervalAfter = value; }
         }
         [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
         public int TimeIntervalForDump
         {
-            get { return server.TimeInterval; }
-            set { if (server != null) server.TimeInterval = value; Properties.Settings.Default.TimeIntervalForDump = value; }
+            get { if (server is not null) return server.TimeInterval; else return 60; }
+            set { if (server is not null) server.TimeInterval = value; Properties.Settings.Default.TimeIntervalForDump = value; }
         }
 
         [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
@@ -209,7 +209,18 @@ namespace DXClusterUtil
             get { return labelStatusQServer.BackColor; }
             set { labelStatusQServer.BackColor = value; }
         }
-        public static Form1 Instance { get { return _instance; } }
+        public static Form1 Instance {
+            get
+            {
+                if (_instance == null)
+                {
+#pragma warning disable CA1303 // Do not pass literals as localized parameters
+                    throw new InvalidOperationException("Instance is not initialized.");
+#pragma warning restore CA1303 // Do not pass literals as localized parameters
+                }
+                return _instance;
+            }
+        }
 
         public bool Connect()
         {
@@ -222,7 +233,7 @@ namespace DXClusterUtil
                 buttonStart.Enabled = true;
                 return false;
             }
-            char[] sep = { ':' };
+            char[] sep = [':'];
             var tokens = textBoxClusterServer.Text.Split(sep);
             if (tokens.Length > 0 && tokens.Length != 2)
             {
@@ -234,7 +245,7 @@ namespace DXClusterUtil
             }
             string host = tokens[0];
             int port = Int32.Parse(tokens[1], CultureInfo.InvariantCulture);
-            if (qrz != null) qrz.Dispose();
+            qrz?.Dispose();
             qrz = new QRZ(textBoxCallsign.Text, textBoxPassword.Text);
             if (qrz == null || qrz.isOnline == false)
             {
@@ -305,7 +316,7 @@ namespace DXClusterUtil
 
         [System.Diagnostics.CodeAnalysis.SuppressMessage("Globalization", "CA1307:Specify StringComparison", Justification = "<Pending>")]
         [System.Diagnostics.CodeAnalysis.SuppressMessage("Globalization", "CA1303:Do not pass literals as localized parameters", Justification = "<Pending>")]
-        private void ButtonStart_Click(object sender, EventArgs e)
+        private void ButtonStart_Click(object? sender, EventArgs? e)
         {
             if (buttonStart.Text.Equals("Disconnect"))
             {
@@ -346,11 +357,11 @@ namespace DXClusterUtil
         {
             timer1.Stop();
             if (clusterClient == null) return;
-            string msg;
+            string? msg;
             //TimeForDump = Convert.ToInt32(comboBoxTimeForDump.SelectedIndex+1);
             while ((msg = clusterClient.Get(out bool cachedQRZ, richTextBox1)) != null)
             {
-                char[] delims = { '\n' };
+                char[] delims = ['\n'];
                 string[] lines = msg.Split(delims);
                 foreach (string s in lines)
                 {
@@ -364,7 +375,7 @@ namespace DXClusterUtil
                         nlines = richTextBox1.Lines.Length;
                         richTextBox1.SelectionStart = 0;
 #pragma warning disable CA1307 // Specify StringComparison
-                        richTextBox1.SelectionLength = richTextBox1.Text.IndexOf("\n", 0) + 1;
+                        richTextBox1.SelectionLength = richTextBox1.Text.IndexOf('\n', 0) + 1;
 #pragma warning restore CA1307 // Specify StringComparison
                         //richTextBox1.Select(0, richTextBox1.GetFirstCharIndexFromLine(2));
                         //richTextBox1.Cut();
@@ -410,7 +421,7 @@ namespace DXClusterUtil
                             //this.Show();
                             //this.WindowState = FormWindowState.Normal;
                         }
-                        if ((filtered || ignored) && !checkBoxFiltered.Checked) continue;
+                        if ((filtered || ignored || tooWeak) && !checkBoxFiltered.Checked) continue;
                         else if (clusterCached && !checkBoxCached.Checked) continue;
                         else if (!filtered && !clusterCached && !dxline && !badCall && !badCallCached && !tooWeak)
                         {
@@ -444,7 +455,7 @@ namespace DXClusterUtil
                         {
                             myColor = Color.Orange;
                         }
-                        labelQRZCache.Text = "" + qrz.cacheQRZ.Count + "/" + badCalls;
+                        labelQRZCache.Text = "" + qrz?.cacheQRZ.Count + "/" + badCalls;
                         labelClusterCache.Text = "" + clusterClient.cacheSpottedCalls.Count;
                         ss = ss.Replace("\r", "", StringComparison.InvariantCulture);
                         ss = ss.Replace("\n", "", StringComparison.InvariantCulture);
@@ -508,9 +519,9 @@ namespace DXClusterUtil
         {
             timer1.Stop();
             Thread.Sleep(500);
-            clusterClient.Disconnect();
+            clusterClient?.Disconnect();
             clusterClient = null;
-            server.Stop();
+            server?.Stop();
             server = null;
         }
 
@@ -596,9 +607,12 @@ namespace DXClusterUtil
 
         private void LabelQDepth_Click(object sender, EventArgs e)
         {
-            clusterClient.CacheClear();
-            clusterClient.totalLines = 0;
-            clusterClient.totalLinesKept = 0;
+            if (clusterClient is not null)
+            {
+                clusterClient.CacheClear();
+                clusterClient.totalLines = 0;
+                clusterClient.totalLinesKept = 0;
+            }
         }
 
         private void CheckedListBoxReviewedSpotters_SelectedIndexChanged(object sender, EventArgs e)
@@ -612,7 +626,7 @@ namespace DXClusterUtil
             if (ctrlKey && shiftKey && altKey) // delete all
             {
                 box.Items.Clear();
-                clusterClient.callSuffixList.Clear();
+                clusterClient?.callSuffixList.Clear();
             }
             if (ctrlKey && shiftKey && !altKey) //delete one
             {
@@ -633,24 +647,28 @@ namespace DXClusterUtil
             {
                 int selected = box.SelectedIndex;
                 if (selected == -1) return;
-                string callsign = box.Items[selected].ToString();
-                box.SetItemChecked(selected, false);
-                string[] tokens = callsign.Split('-');  // have to remove any suffix like this
-                string url = "https://qrz.com/db/" + tokens[0];
+                string? callsign = box?.Items[selected].ToString();
+                box?.SetItemChecked(selected, false);
+                string[]? tokens = callsign?.Split('-');  // have to remove any suffix like this
+                string url = "https://qrz.com/db/" + tokens?[0];
                 System.Diagnostics.Process.Start(url);
                 return;
             }
             else if (ctrlKey && altKey && !shiftKey)
             {
-                string curItem = box.SelectedItem.ToString();
-                int index = box.FindString(curItem);
-                if (!listBoxIgnoredSpotters.Items.Contains(curItem))
+                string? curItem = box?.SelectedItem?.ToString();
+                if (curItem is not null)
                 {
-                    listBoxIgnoredSpotters.Items.Insert(0, curItem);
-                    listBoxIgnoredSpotters.TopIndex = 0;
-                    box.Items.RemoveAt(index);
+                    int? index = box?.FindString(curItem);
+                    if (!listBoxIgnoredSpotters.Items.Contains(curItem))
+                    {
+                        listBoxIgnoredSpotters.Items.Insert(0, curItem);
+                        listBoxIgnoredSpotters.TopIndex = 0;
+                        if (index is not null)
+                            box?.Items.RemoveAt((int)index);
+                    }
+                    ReviewedSpottersSave(true);
                 }
-                ReviewedSpottersSave(true);
             }
         }
 
@@ -674,9 +692,11 @@ namespace DXClusterUtil
             var spottersChecked = checkedListBoxReviewedSpotters.CheckedItems;
             string reviewedSpotters = "";
 
-            for (int i = 0; i < spottersChecked.Count; ++i)
+            for (int i = 0; i < spottersChecked?.Count; ++i)
             {
-                string s = spottersChecked[i].ToString();
+                string? s = "??";
+                if (spottersChecked is not null)
+                    s = spottersChecked[i]?.ToString();
                 if (checkedListBoxReviewedSpotters.GetItemCheckState(i) == CheckState.Indeterminate)
                 {
                     reviewedSpotters += s + ",2;";
@@ -689,7 +709,7 @@ namespace DXClusterUtil
             var spottersAll = checkedListBoxReviewedSpotters.Items;
             foreach (string s in spottersAll)
             {
-                if (!spottersChecked.Contains(s))
+                if (spottersChecked is not null && !spottersChecked.Contains(s))
                 {
                     reviewedSpotters += s + ",0;";
                 }
@@ -734,20 +754,22 @@ namespace DXClusterUtil
             bool altKey = ModifierKeys.HasFlag(Keys.Alt);
             if (ctrlKey && !shiftKey && !altKey) // move to reviewed spotters
             {
-                string curItem = checkedListBoxNewSpotters.SelectedItem.ToString();
-                int index = checkedListBoxNewSpotters.FindString(curItem);
+                string? curItem = checkedListBoxNewSpotters?.SelectedItem?.ToString();
+                if (curItem == null) return;
+                int? index = checkedListBoxNewSpotters?.FindString(curItem);
+                if (index is null) return;
                 if (!checkedListBoxReviewedSpotters.Items.Contains(curItem))
                 {
                     checkedListBoxReviewedSpotters.Items.Insert(0, curItem);
                     checkedListBoxReviewedSpotters.TopIndex = 0;
-                    checkedListBoxNewSpotters.Items.RemoveAt(index);
+                    checkedListBoxNewSpotters?.Items.RemoveAt((int)index);
                 }
                 ReviewedSpottersSave(true);
             }
             if (ctrlKey && shiftKey && altKey) // delete all
             {
                 box.Items.Clear();
-                clusterClient.callSuffixList.Clear();
+                clusterClient?.callSuffixList.Clear();
             }
             if (ctrlKey && shiftKey && !altKey) //delete one
             {
@@ -768,10 +790,10 @@ namespace DXClusterUtil
             {
                 int selected = box.SelectedIndex;
                 if (selected == -1) return;
-                string callsign = box.Items[selected].ToString();
-                box.SetItemChecked(selected, false);
-                string[] tokens = callsign.Split('-');  // have to remove any suffix like this
-                string url = "https://qrz.com/db/" + tokens[0];
+                string? callsign = box?.Items[selected].ToString();
+                box?.SetItemChecked(selected, false);
+                string[]? tokens = callsign?.Split('-');  // have to remove any suffix like this
+                string url = "https://qrz.com/db/" + tokens?[0];
                 //var uri = new Uri(url);
                 var psi = new ProcessStartInfo
                 {
@@ -786,15 +808,18 @@ namespace DXClusterUtil
             }
             else if (ctrlKey && altKey && !shiftKey)
             {
-                string curItem = box.SelectedItem.ToString();
-                int index = box.FindString(curItem);
-                if (!listBoxIgnoredSpotters.Items.Contains(curItem))
+                string? curItem = box?.SelectedItem.ToString();
+                if (curItem is not null)
                 {
-                    listBoxIgnoredSpotters.Items.Insert(0, curItem);
-                    listBoxIgnoredSpotters.TopIndex = 0;
-                    box.Items.RemoveAt(index);
+                    int? index = box?.FindString(curItem);
+                    if ((index is not null) && !listBoxIgnoredSpotters.Items.Contains(curItem))
+                    {
+                        listBoxIgnoredSpotters.Items.Insert(0, curItem);
+                        listBoxIgnoredSpotters.TopIndex = 0;
+                        box?.Items.RemoveAt((int)index);
+                    }
+                    //ReviewedSpottersSave(true);
                 }
-                //ReviewedSpottersSave(true);
             }
             NewSpottersSave();
         }
@@ -853,8 +878,8 @@ namespace DXClusterUtil
             if (ModifierKeys.HasFlag(Keys.Shift))
             {
                 Debug = !Debug;
-                clusterClient.debug = Debug;
-                qrz.debug = Debug;
+                if (clusterClient is not null) clusterClient.debug = Debug;
+                if (qrz is not null) qrz.debug = Debug;
                 richTextBox1.AppendText("Debug = " + Debug + "\n");
             }
         }
@@ -947,9 +972,9 @@ namespace DXClusterUtil
             {
                 int selected = box.SelectedIndex;
                 if (selected == -1) return;
-                string callsign = box.Items[selected].ToString();
-                string[] tokens = callsign.Split('-');  // have to remove any suffix like this
-                string url = "https://qrz.com/db/" + tokens[0];
+                string? callsign = box.Items[selected].ToString();
+                string[]? tokens = callsign?.Split('-');  // have to remove any suffix like this
+                string url = "https://qrz.com/db/" + tokens?[0];
                 System.Diagnostics.Process.Start(url);
                 return;
             }
@@ -976,7 +1001,7 @@ namespace DXClusterUtil
             if (ctrlKey && shiftKey && altKey) // delete all
             {
                 box.Items.Clear();
-                clusterClient.callSuffixList.Clear();
+                clusterClient?.callSuffixList.Clear();
             }
             if (ctrlKey && shiftKey && !altKey) //delete one
             {
@@ -997,10 +1022,10 @@ namespace DXClusterUtil
             {
                 int selected = box.SelectedIndex;
                 if (selected == -1) return;
-                string callsign = box.Items[selected].ToString();
-                box.SetItemChecked(selected, false);
-                string[] tokens = callsign.Split('-');  // have to remove any suffix like this
-                string url = "https://qrz.com/db/" + tokens[0];
+                string? callsign = box?.Items[selected].ToString();
+                box?.SetItemChecked(selected, false);
+                string[]? tokens = callsign?.Split('-');  // have to remove any suffix like this
+                string url = "https://qrz.com/db/" + tokens?[0];
                 System.Diagnostics.Process.Start(url);
                 return;
             }
diff --git a/QRZ.cs b/QRZ.cs
index b27068a..d76b1b8 100644
--- a/QRZ.cs
+++ b/QRZ.cs
@@ -48,14 +48,14 @@ namespace DXClusterUtil
 
             }
             StreamReader aliasFile = new(pathQRZAlias);
-            string s;
-            while ((s = aliasFile.ReadLine()) != null)
+            string? s;
+            while ((s = aliasFile?.ReadLine()) != null)
             {
                 string[] tokens = s.Split(',');
                 aliasNeeded.Add(tokens[0]);
             }
-            aliasFile.Close();
-            aliasFile.Dispose();
+            aliasFile?.Close();
+            aliasFile?.Dispose();
             if (debug)
             {
                 try
@@ -94,8 +94,9 @@ namespace DXClusterUtil
             }
         }
 
-        private static string QRZField(DataRow row, string f)
+        private static string QRZField(DataRow? row, string f)
         {
+            if (row is null) return "row is null?";
             if (row.Table.Columns.Contains(f))
             {
                 return row[f]?.ToString() ?? "";
@@ -144,7 +145,7 @@ namespace DXClusterUtil
                 catch { }
 #pragma warning restore CA1031 // Do not catch general exception types
             }
-            if (cacheQRZ.TryGetValue(callSign, out string validCall))
+            if (cacheQRZ.TryGetValue(callSign, out string? validCall))
             { // it's in the cache so check our previous result for BAD
                 if (debug)
                 {
@@ -274,13 +275,14 @@ namespace DXClusterUtil
         }
 
         //[System.Diagnostics.CodeAnalysis.SuppressMessage("Globalization", "CA1303:Do not pass literals as localized parameters", Justification = "<Pending>")]
+        [System.Diagnostics.CodeAnalysis.SuppressMessage("Globalization", "CA1303:Do not pass literals as localized parameters", Justification = "<Pending>")]
         public bool CallQRZ(string url, string call, out string email, out int qrzdxcc)
         {
             qrzdxcc = 0;
             mutexQRZ.WaitOne();
             email = "none";
             String qrzstr;
-            Stream qrzstrm = null;
+            Stream? qrzstrm = null;
             try
             {
                 QRZData.Clear();
@@ -330,13 +332,36 @@ namespace DXClusterUtil
                     mutexQRZ.ReleaseMutex();
                     return false;
                 }
+                if (QRZData is null || QRZData.Tables is null)
+                {
+#pragma warning disable CA1303 // Do not pass literals as localized parameters
+                    MessageBox.Show("QRZDatabase??");
+#pragma warning restore CA1303 // Do not pass literals as localized parameters
+                    return false;
+                }
+#pragma warning disable CS8602 // Dereference of a possibly null reference.
                 DataRow dr = QRZData.Tables["QRZDatabase"].Rows[0];
-                //Lversion.Text = QRZField(dr, "version");
+#pragma warning restore CS8602 // Dereference of a possibly null reference.
+                              //Lversion.Text = QRZField(dr, "version");
                 if (url.Contains("username", StringComparison.InvariantCulture))
                 {
-                    DataTable sess = QRZData.Tables["Session"];
+                    if (QRZData is null)
+                    {
+                        MessageBox.Show("QRZData is null??");
+                        return false;
+                    }
+                    DataTable? sess = null;
+                    if (QRZData is not null) sess = QRZData.Tables["Session"];
+                    if (sess is null)
+                    {
+#pragma warning disable CA1303 // Do not pass literals as localized parameters
+                        MessageBox.Show("Session??");
+#pragma warning restore CA1303 // Do not pass literals as localized parameters
+                        return false;
+                    }    
                     DataRow sr = sess.Rows[0];
-                    string xx = QRZData.GetXml();
+                    string? xx = null;
+                    if (QRZData is not null) xx = QRZData.GetXml();
                     xmlError = QRZField(sr, "Error");
                     if (xmlError.Length > 0) return false;
                     if (QRZField(sr, "Key").Length > 0)
@@ -348,8 +373,8 @@ namespace DXClusterUtil
                 {
                     string version = QRZField(dr, "version");
                     //if (version.Equals("1.24")) MessageBox.Show("Version != 1.24, ==" + version);
-                    DataTable sess = QRZData.Tables["Session"];
-                    DataRow sr = sess.Rows[0];
+                    DataTable? sess = QRZData.Tables["Session"];
+                    DataRow? sr = sess?.Rows[0];
                     string xmlError = QRZField(sr, "Error");
                     xmlSession = QRZField(sr, "Key");
                     if (xmlError.Contains("Not found", StringComparison.InvariantCulture))
@@ -388,7 +413,14 @@ namespace DXClusterUtil
 #pragma warning restore CA1031 // Do not catch general exception types
                         }
                     }
-                    DataTable callTable = QRZData.Tables["Callsign"];
+                    DataTable? callTable = QRZData.Tables?["Callsign"];
+                    if (callTable == null)
+                    {
+#pragma warning disable CA1303 // Do not pass literals as localized parameters
+                        MessageBox.Show("callTable problem?");
+#pragma warning restore CA1303 // Do not pass literals as localized parameters
+                        return false;
+                    }
                     if (callTable.Rows.Count == 0) return false;
                     dr = callTable.Rows[0];
                     string callsign = QRZField(dr, "Call");
diff --git a/QServer.cs b/QServer.cs
index cedb77d..fc0c30e 100644
--- a/QServer.cs
+++ b/QServer.cs
@@ -12,16 +12,16 @@ using System.Windows.Forms;
 
 namespace DXClusterUtil
 {
-    class QServer
+    class QServer : IDisposable
     {
         readonly ConcurrentBag<string> clientQueue;
         readonly ConcurrentBag<string> spotQueue;
         bool running = false;
         bool stop = false;
         bool connected;
-        readonly TcpListener listener;
-        NetworkStream stream;
-        Thread myThreadID;
+        readonly TcpListener? listener;
+        NetworkStream? stream;
+        Thread? myThreadID;
 
         public int TimeIntervalAfter { get; set; } // in seconds
         public int TimeInterval { get; set; } // Expecting 1, 15, 30, 60 
@@ -63,7 +63,7 @@ namespace DXClusterUtil
             running = false;
             stop = true;
             connected = false;
-            listener.Stop();
+            listener?.Stop();
             Thread.Sleep(500);
         }
 
@@ -75,22 +75,31 @@ namespace DXClusterUtil
                 try
                 {
                     var bytes = new byte[8192];
-                    int bytesRead = stream.Read(bytes, 0, bytes.Length);
-                    string cmd = Encoding.ASCII.GetString(bytes, 0, bytesRead);
-                    if (cmd.Contains("bye", StringComparison.InvariantCulture))
+                    int? bytesRead = stream?.Read(bytes, 0, bytes.Length);
+                    if (bytesRead is null)
                     {
-                        //connected = running = false;
-                    }
-                    else if (bytesRead == 0)
-                    {
-                        connected = false;
-                        running = false;
+#pragma warning disable CA1303 // Do not pass literals as localized parameters
+                        MessageBox.Show("bytesRead is null?");
+#pragma warning restore CA1303 // Do not pass literals as localized parameters
                     }
-                    else
+                    if (bytesRead is not null)
                     {
-                        if (cmd.Length > 0)
+                        string cmd = Encoding.ASCII.GetString(bytes, 0, (int)bytesRead);
+                        if (cmd.Contains("bye", StringComparison.InvariantCulture))
+                        {
+                            //connected = running = false;
+                        }
+                        else if (bytesRead == 0)
+                        {
+                            connected = false;
+                            running = false;
+                        }
+                        else
                         {
-                            spotQueue.Add(cmd);
+                            if (cmd.Length > 0)
+                            {
+                                spotQueue?.Add(cmd);
+                            }
                         }
                     }
                 }
@@ -109,14 +118,16 @@ namespace DXClusterUtil
         {
             while (true && !stop)
             {
-                if (listener != null) 
-                    listener.Stop();
-                listener.Start();
+                if (listener != null)
+                {
+                    listener?.Stop();
+                    listener?.Start();
+                }
                 running = true;
-                TcpClient client;
+                TcpClient? client;
                 try
                 {
-                    client = listener.AcceptTcpClient();
+                    client = listener?.AcceptTcpClient();
                     //Thread.Sleep(500);
                     connected = true;
                 }
@@ -127,13 +138,15 @@ namespace DXClusterUtil
                     running = false;
                     return;
                 }
-                client.ReceiveTimeout = 1000;
-                client.SendTimeout = 1000;
-                stream = client.GetStream();
+                if (client is not null)
+                {
+                    client.ReceiveTimeout = 1000;
+                    client.SendTimeout = 1000;
+                    stream = client?.GetStream();
+                }
                 myThreadID = new Thread(new ThreadStart(ReadThread));
-                myThreadID.Start();
+                myThreadID?.Start();
                 byte[] bytes;
-                string msg;
                 while (running)
                 {
                     try
@@ -145,7 +158,7 @@ namespace DXClusterUtil
                         if (seconds == secondsChk)
                         {
                             // Let the clock get past the zero second mark
-                            while(clientQueue.TryTake(out msg))
+                            while (clientQueue.TryTake(out string? msg))
                             {
                                 /*
                                 msg = msg.Replace("-1-#:", "-#:  ");
@@ -162,14 +175,14 @@ namespace DXClusterUtil
                                 if (msg[0] != '*')
                                 {
                                     bytes = Encoding.ASCII.GetBytes(msg);
-                                    stream.Write(bytes, 0, bytes.Length);
+                                    stream?.Write(bytes, 0, bytes.Length);
                                 }
                             }
                             Thread.Sleep(2000);
                         }
-                        if (!stream.CanWrite)
+                        if (stream is not null && !stream.CanWrite)
                             running = false;
-                        if (!client.Connected)
+                        if (client is not null && !client.Connected)
                         {
                             connected = false;
                             running = false;
@@ -182,8 +195,8 @@ namespace DXClusterUtil
                         byte[] tmp = new byte[1];
                         //stream.Socket.Write(tmp, 0, 0);
                         //var xxx = stream.Read(tmp, 0, 0);
-                        var xx = stream.Socket.IsBound;
-                        if (!client.Connected)
+                        var xx = stream?.Socket.IsBound;
+                        if (client is not null && !client.Connected)
                         {
                             connected = running = false;
                         }
@@ -219,13 +232,19 @@ namespace DXClusterUtil
                         running = false;
                     }
                 }
-                 stream.Close();
-                if (client.Connected) 
-                    client.Close();
+                stream?.Close();
+                if (client is not null && client.Connected) 
+                    client?.Close();
                 connected = false;
             }
-            listener.Stop();
+            listener?.Stop();
 
         }
+
+        public void Dispose()
+        {
+            GC.SuppressFinalize(this);
+            //throw new NotImplementedException();
+        }
     }
 }
