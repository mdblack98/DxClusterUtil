diff --git a/Form1.Designer.cs b/Form1.Designer.cs
index f9f4a24..64bb1e3 100644
--- a/Form1.Designer.cs
+++ b/Form1.Designer.cs
@@ -16,6 +16,7 @@
             if (disposing && (components != null))
             {
                 if (w3lpl != null) w3lpl.Dispose();
+                if (tooltip != null) tooltip.Dispose();
                 components.Dispose();
             }
             base.Dispose(disposing);
@@ -39,6 +40,17 @@
             this.textBoxCallsign = new System.Windows.Forms.TextBox();
             this.labelStatusQServer = new System.Windows.Forms.Label();
             this.textBoxPortLocal = new System.Windows.Forms.TextBox();
+            this.checkedListBoxNewSpotters = new System.Windows.Forms.CheckedListBox();
+            this.label1 = new System.Windows.Forms.Label();
+            this.label2 = new System.Windows.Forms.Label();
+            this.buttonBackup = new System.Windows.Forms.Button();
+            this.checkedListBoxReviewedSpotters = new W3LPL.ColorCodedCheckedListBox();
+            this.form1BindingSource1 = new System.Windows.Forms.BindingSource(this.components);
+            this.form1BindingSource = new System.Windows.Forms.BindingSource(this.components);
+            this.form1BindingSource2 = new System.Windows.Forms.BindingSource(this.components);
+            ((System.ComponentModel.ISupportInitialize)(this.form1BindingSource1)).BeginInit();
+            ((System.ComponentModel.ISupportInitialize)(this.form1BindingSource)).BeginInit();
+            ((System.ComponentModel.ISupportInitialize)(this.form1BindingSource2)).BeginInit();
             this.SuspendLayout();
             // 
             // buttonStart
@@ -58,10 +70,10 @@
             | System.Windows.Forms.AnchorStyles.Left) 
             | System.Windows.Forms.AnchorStyles.Right)));
             this.richTextBox1.Font = new System.Drawing.Font("Courier New", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
-            this.richTextBox1.Location = new System.Drawing.Point(13, 88);
+            this.richTextBox1.Location = new System.Drawing.Point(13, 120);
             this.richTextBox1.Margin = new System.Windows.Forms.Padding(4);
             this.richTextBox1.Name = "richTextBox1";
-            this.richTextBox1.Size = new System.Drawing.Size(661, 115);
+            this.richTextBox1.Size = new System.Drawing.Size(767, 154);
             this.richTextBox1.TabIndex = 3;
             this.richTextBox1.Text = "";
             // 
@@ -73,7 +85,7 @@
             // labelQDepth
             // 
             this.labelQDepth.AutoSize = true;
-            this.labelQDepth.Location = new System.Drawing.Point(446, 22);
+            this.labelQDepth.Location = new System.Drawing.Point(250, 53);
             this.labelQDepth.Name = "labelQDepth";
             this.labelQDepth.Size = new System.Drawing.Size(16, 17);
             this.labelQDepth.TabIndex = 6;
@@ -105,24 +117,98 @@
             this.labelStatusQServer.AutoSize = true;
             this.labelStatusQServer.Location = new System.Drawing.Point(103, 53);
             this.labelStatusQServer.Name = "labelStatusQServer";
-            this.labelStatusQServer.Size = new System.Drawing.Size(0, 17);
+            this.labelStatusQServer.Size = new System.Drawing.Size(54, 17);
             this.labelStatusQServer.TabIndex = 8;
+            this.labelStatusQServer.Text = "W3LPL";
             // 
             // textBoxPortLocal
             // 
             this.textBoxPortLocal.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper;
             this.textBoxPortLocal.DataBindings.Add(new System.Windows.Forms.Binding("Text", global::W3LPL.Properties.Settings.Default, "PortLocal", true, System.Windows.Forms.DataSourceUpdateMode.OnPropertyChanged));
-            this.textBoxPortLocal.Location = new System.Drawing.Point(17, 50);
+            this.textBoxPortLocal.Location = new System.Drawing.Point(17, 51);
             this.textBoxPortLocal.Name = "textBoxPortLocal";
             this.textBoxPortLocal.Size = new System.Drawing.Size(71, 22);
             this.textBoxPortLocal.TabIndex = 9;
             this.textBoxPortLocal.Text = global::W3LPL.Properties.Settings.Default.PortLocal;
             // 
+            // checkedListBoxNewSpotters
+            // 
+            this.checkedListBoxNewSpotters.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
+            this.checkedListBoxNewSpotters.CheckOnClick = true;
+            this.checkedListBoxNewSpotters.FormattingEnabled = true;
+            this.checkedListBoxNewSpotters.Location = new System.Drawing.Point(478, 21);
+            this.checkedListBoxNewSpotters.Name = "checkedListBoxNewSpotters";
+            this.checkedListBoxNewSpotters.Size = new System.Drawing.Size(137, 89);
+            this.checkedListBoxNewSpotters.TabIndex = 11;
+            this.checkedListBoxNewSpotters.SelectedIndexChanged += new System.EventHandler(this.CheckedListBoxNewSpotters_SelectedIndexChanged);
+            // 
+            // label1
+            // 
+            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
+            this.label1.AutoSize = true;
+            this.label1.Location = new System.Drawing.Point(478, 0);
+            this.label1.Name = "label1";
+            this.label1.Size = new System.Drawing.Size(92, 17);
+            this.label1.TabIndex = 12;
+            this.label1.Text = "New Spotters";
+            // 
+            // label2
+            // 
+            this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
+            this.label2.AutoSize = true;
+            this.label2.Location = new System.Drawing.Point(643, 0);
+            this.label2.Name = "label2";
+            this.label2.Size = new System.Drawing.Size(126, 17);
+            this.label2.TabIndex = 13;
+            this.label2.Text = "Reviewed Spotters";
+            // 
+            // buttonBackup
+            // 
+            this.buttonBackup.Location = new System.Drawing.Point(17, 80);
+            this.buttonBackup.Name = "buttonBackup";
+            this.buttonBackup.Size = new System.Drawing.Size(100, 28);
+            this.buttonBackup.TabIndex = 14;
+            this.buttonBackup.Text = "Backup";
+            this.buttonBackup.UseVisualStyleBackColor = true;
+            this.buttonBackup.Click += new System.EventHandler(this.ButtonBackup_Click);
+            // 
+            // checkedListBoxReviewedSpotters
+            // 
+            this.checkedListBoxReviewedSpotters.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
+            this.checkedListBoxReviewedSpotters.CheckedColor = System.Drawing.Color.Green;
+            this.checkedListBoxReviewedSpotters.CheckOnClick = true;
+            this.checkedListBoxReviewedSpotters.FormattingEnabled = true;
+            this.checkedListBoxReviewedSpotters.IndeterminateColor = System.Drawing.Color.Orange;
+            this.checkedListBoxReviewedSpotters.Location = new System.Drawing.Point(637, 21);
+            this.checkedListBoxReviewedSpotters.Name = "checkedListBoxReviewedSpotters";
+            this.checkedListBoxReviewedSpotters.Size = new System.Drawing.Size(137, 89);
+            this.checkedListBoxReviewedSpotters.TabIndex = 10;
+            this.checkedListBoxReviewedSpotters.UncheckedColor = System.Drawing.Color.Red;
+            this.checkedListBoxReviewedSpotters.SelectedIndexChanged += new System.EventHandler(this.CheckedListBoxReviewedSpotters_SelectedIndexChanged);
+            this.checkedListBoxReviewedSpotters.MouseUp += new System.Windows.Forms.MouseEventHandler(this.CheckedListBoxReviewedSpotters_MouseUp);
+            // 
+            // form1BindingSource1
+            // 
+            this.form1BindingSource1.DataSource = typeof(W3LPL.Form1);
+            // 
+            // form1BindingSource
+            // 
+            this.form1BindingSource.DataSource = typeof(W3LPL.Form1);
+            // 
+            // form1BindingSource2
+            // 
+            this.form1BindingSource2.DataSource = typeof(W3LPL.Form1);
+            // 
             // Form1
             // 
             this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
-            this.ClientSize = new System.Drawing.Size(687, 216);
+            this.ClientSize = new System.Drawing.Size(793, 287);
+            this.Controls.Add(this.buttonBackup);
+            this.Controls.Add(this.label2);
+            this.Controls.Add(this.label1);
+            this.Controls.Add(this.checkedListBoxNewSpotters);
+            this.Controls.Add(this.checkedListBoxReviewedSpotters);
             this.Controls.Add(this.textBoxPortLocal);
             this.Controls.Add(this.labelStatusQServer);
             this.Controls.Add(this.textBoxClusterServer);
@@ -135,11 +221,14 @@
             this.Location = global::W3LPL.Properties.Settings.Default.Location;
             this.Margin = new System.Windows.Forms.Padding(4);
             this.Name = "Form1";
-            this.Text = "W3LPL V0.10";
+            this.Text = "W3LPL V0.17";
             this.Activated += new System.EventHandler(this.Form1_Activated);
             this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.Form1_FormClosing);
             this.ResizeEnd += new System.EventHandler(this.Form1_ResizeEnd);
             this.LocationChanged += new System.EventHandler(this.Form1_LocationChanged);
+            ((System.ComponentModel.ISupportInitialize)(this.form1BindingSource1)).EndInit();
+            ((System.ComponentModel.ISupportInitialize)(this.form1BindingSource)).EndInit();
+            ((System.ComponentModel.ISupportInitialize)(this.form1BindingSource2)).EndInit();
             this.ResumeLayout(false);
             this.PerformLayout();
 
@@ -155,6 +244,14 @@
         private System.Windows.Forms.TextBox textBoxClusterServer;
         private System.Windows.Forms.Label labelStatusQServer;
         private System.Windows.Forms.TextBox textBoxPortLocal;
+        private System.Windows.Forms.BindingSource form1BindingSource1;
+        private System.Windows.Forms.BindingSource form1BindingSource;
+        private System.Windows.Forms.BindingSource form1BindingSource2;
+        public System.Windows.Forms.CheckedListBox checkedListBoxNewSpotters;
+        private System.Windows.Forms.Label label1;
+        private System.Windows.Forms.Label label2;
+        private ColorCodedCheckedListBox checkedListBoxReviewedSpotters;
+        private System.Windows.Forms.Button buttonBackup;
     }
 }
 
diff --git a/Form1.cs b/Form1.cs
index 157a187..002a972 100644
--- a/Form1.cs
+++ b/Form1.cs
@@ -1,16 +1,11 @@
 ﻿using System;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.ComponentModel;
-using System.Data;
-using System.Drawing;
-using System.Linq;
-using System.Text;
+using System.Configuration;
+using System.Globalization;
+using System.Threading;
 using System.Threading.Tasks;
 using System.Windows.Forms;
-using System.Net.Sockets;
-using System.Threading;
-using System.Collections.Concurrent;
-using System.Globalization;
 
 namespace W3LPL
 {
@@ -20,15 +15,25 @@ namespace W3LPL
         readonly ConcurrentBag<string> clientQueue = new ConcurrentBag<string>();
         readonly ConcurrentBag<string> w3lplQueue = new ConcurrentBag<string>();
         private QServer server;
-
+        readonly ToolTip tooltip = new ToolTip();
+        //BindingList<FilterItem> filterList = new BindingList<FilterItem>();
         //public volatile static int keep;
 
+        /*
+    private class FilterItem
+    {
+        string Text { get; set; }
+        public FilterItem(string callsign)
+        {
+            Text = callsign;
+        }
+    }
+    */
         [System.Diagnostics.CodeAnalysis.SuppressMessage("Globalization", "CA1303:Do not pass literals as localized parameters", Justification = "<Pending>")]
         public Form1()
         {
             InitializeComponent();
             Size = Properties.Settings.Default.Size;
-            ToolTip tooltip = new ToolTip();
             var tip = "Callsign";
             tooltip.SetToolTip(textBoxCallsign, tip);
             tip = "Local port";
@@ -39,15 +44,50 @@ namespace W3LPL
             tooltip.SetToolTip(labelQDepth, tip);
             tip = "Client status";
             tooltip.SetToolTip(labelStatusQServer, tip);
-            tooltip.Dispose();
+            tip = "Click to enable, ctrl-click to disable, ctrl-shift-click to delete";
+            tooltip.SetToolTip(checkedListBoxReviewedSpotters, tip);
+            tip = "Click to see QRZ page, ctrl-click to transfer to Reviewed";
+            tooltip.SetToolTip(checkedListBoxNewSpotters, tip);
+            tip = "Backup user.config";
+            tooltip.SetToolTip(buttonBackup, tip);
+            //tooltip.Dispose();
+            var reviewedSpotters = Properties.Settings.Default.ReviewedSpotters;
+            string[] tokens = reviewedSpotters.Split(';');
+            foreach(string arg in tokens)
+            {
+                if (arg.Length == 0) continue;
+                string[] tokens2 = arg.Split(',');
+                if (tokens2.Length == 2 && tokens2[0].Length > 0)
+                {
+                    CheckState myCheck = CheckState.Indeterminate;
+                    if (tokens2[1].Equals("1", StringComparison.InvariantCultureIgnoreCase))
+                    {
+                        myCheck = CheckState.Checked;
+                    }
+                    else if (tokens2[1].Equals("0", StringComparison.InvariantCultureIgnoreCase))
+                    {
+                        myCheck = CheckState.Unchecked;
+                    }
+                    checkedListBoxReviewedSpotters.Items.Add(tokens2[0], myCheck);
+                }
+                else
+                {
+                    MessageBox.Show("Unknown reviewedSpotters entry '" + arg + "'");
+                }
+                checkedListBoxReviewedSpotters.Sorted = false;
+                checkedListBoxReviewedSpotters.Sorted = true;
+                checkedListBoxReviewedSpotters.Sorted = false;
+            }
         }
 
         [System.Diagnostics.CodeAnalysis.SuppressMessage("Globalization", "CA1303:Do not pass literals as localized parameters", Justification = "<Pending>")]
         public bool Connect()
         {
+            buttonStart.Enabled = false;
             if (textBoxCallsign.Text.Length == 0)
             {
                 MessageBox.Show("Need callsign!~", "QueueIt");
+                buttonStart.Enabled = true;
                 return false;
             }
             char[] sep = { ':' };
@@ -55,6 +95,7 @@ namespace W3LPL
             if (tokens.Length != 2)
             {
                 MessageBox.Show("Bad format for cluster server", "W3LPL");
+                buttonStart.Enabled = true;
                 return false;
             }
             string host = tokens[0];
@@ -62,19 +103,29 @@ namespace W3LPL
             w3lpl = new W3LPLClient(host,port, w3lplQueue);
             try
             {
+                richTextBox1.AppendText("Trying to connect\n");
+                Application.DoEvents();
                 if (w3lpl.Connect(textBoxCallsign.Text, richTextBox1, clientQueue))
                 {
+                    richTextBox1.AppendText("Connected\n");
                     timer1.Start();
                     buttonStart.Text = "Disconnect";
                     richTextBox1.SelectionStart = richTextBox1.Text.Length;
                     richTextBox1.ScrollToCaret();
                 }
+                else
+                {
+                    buttonStart.Text = "Start";
+                    richTextBox1.AppendText("Connect failed....hmmm...no answer from W3LPL?\n");
+                }
+                ReviewedSpottersSave(false);
             }
 #pragma warning disable CA1031 // Do not catch general exception types
             catch (Exception ex)
 #pragma warning restore CA1031 // Do not catch general exception types
             {
                 buttonStart.Text = "Connect";
+                buttonStart.Enabled = true;
                 MessageBox.Show(ex.Message, "QueueIt");
             }
 
@@ -86,6 +137,7 @@ namespace W3LPL
                     _ = Task.Run(() => server.Start());
                 }
             }
+            buttonStart.Enabled = true;
             return true;
         }
 
@@ -130,12 +182,40 @@ namespace W3LPL
             labelQDepth.Text = "  Spots:" + w3lpl.totalLines + "   Q(" + clientQueue.Count.ToString() + "/" + pct + "%)";
             //labelQDepth.Text = "Q(" + clientQueue.Count.ToString() + ")";
 
+            
+            // See if our filter list needs updating
+            foreach(var s in w3lpl.callSuffixList)
+            {
+                if (!checkedListBoxReviewedSpotters.Items.Contains(s) && !checkedListBoxNewSpotters.Items.Contains(s))
+                {
+                    checkedListBoxNewSpotters.Items.Add(s);
+                }
+            }
             timer1.Interval = 1000;
             timer1.Start();
             try
             {
-                if (server.IsConnected()) labelStatusQServer.Text = "Client connected";
-                else labelStatusQServer.Text = "Ready for client";
+                if (server.IsConnected())
+                {
+                    System.Drawing.ColorTranslator.FromHtml("#F0F0F0");
+                    labelStatusQServer.BackColor = System.Drawing.ColorTranslator.FromHtml("#F0F0F0");
+                    labelStatusQServer.Text = "Client connected";
+                }
+                else
+                {
+                    if (labelStatusQServer.Text.Equals("Client connected", StringComparison.InvariantCultureIgnoreCase))
+                    { // then it disconnected
+                        labelStatusQServer.BackColor = System.Drawing.Color.Red;
+                        labelStatusQServer.Text = "Client disconnected";
+                        WindowState = FormWindowState.Minimized;
+                        WindowState = FormWindowState.Normal;
+                    }
+                    else if (labelStatusQServer.Text.Equals("W3LPL",StringComparison.InvariantCultureIgnoreCase))
+                    {
+                        labelStatusQServer.BackColor = System.Drawing.ColorTranslator.FromHtml("#F0F0F0");
+                        labelStatusQServer.Text = "Ready for client";
+                    }
+                }
             }
 #pragma warning disable CA1031 // Do not catch general exception types
             catch (Exception)
@@ -210,5 +290,114 @@ namespace W3LPL
             w3lpl.totalLines = 0;
             w3lpl.totalLinesKept = 0;
         }
+
+        private void CheckedListBoxReviewedSpotters_SelectedIndexChanged(object sender, EventArgs e)
+        {
+            bool ctrlKey = ModifierKeys.HasFlag(Keys.Control);
+            bool shiftKey = ModifierKeys.HasFlag(Keys.Shift);
+            bool altKey = ModifierKeys.HasFlag(Keys.Alt);
+            int selectedIndex = checkedListBoxReviewedSpotters.SelectedIndex;
+            if (selectedIndex == -1) return;
+            if (ctrlKey && shiftKey && !altKey)
+            {
+                checkedListBoxReviewedSpotters.Items.RemoveAt(selectedIndex);
+            }
+            else if (ctrlKey && !shiftKey && !altKey)
+            {
+                checkedListBoxReviewedSpotters.SetItemCheckState(selectedIndex, CheckState.Indeterminate);
+            }
+        }
+
+        private void ReviewedSpottersSave(bool save)
+        {
+            var spottersChecked = checkedListBoxReviewedSpotters.CheckedItems;
+            string reviewedSpotters = "";
+
+            for (int i = 0; i < spottersChecked.Count; ++i) 
+            {
+                string s = spottersChecked[i].ToString();
+                if (checkedListBoxReviewedSpotters.GetItemCheckState(i) == CheckState.Indeterminate)
+                {
+                    reviewedSpotters +=  s + ",2;";
+                }
+                else
+                {
+                    reviewedSpotters += s + ",1;";
+                }
+            }
+            var spottersAll = checkedListBoxReviewedSpotters.Items;
+            foreach (string s in spottersAll)
+            {
+                if (!spottersChecked.Contains(s))
+                {
+                    reviewedSpotters += s + ",0;";
+                }
+            }
+            if (save)
+            {
+                Properties.Settings.Default.ReviewedSpotters = reviewedSpotters;
+                Properties.Settings.Default.Save();
+            }
+            if (w3lpl != null) w3lpl.reviewedSpotters = reviewedSpotters;
+        }
+        private void CheckedListBoxNewSpotters_SelectedIndexChanged(object sender, EventArgs e)
+        {
+            bool ctrlKey = ModifierKeys.HasFlag(Keys.Control);
+            if (ctrlKey) // move to reviewed spotters
+            {
+                var items2 = checkedListBoxNewSpotters.CheckedItems;
+                List<string> sitems = new List<string>();
+                foreach (string s in items2)
+                {
+                    sitems.Add(s);
+                }
+                foreach (string s in sitems)
+                {
+                    checkedListBoxNewSpotters.Items.Remove(s);
+                    if (!checkedListBoxReviewedSpotters.Items.Contains(s))
+                    {
+                        checkedListBoxReviewedSpotters.Items.Insert(0, s);
+                        checkedListBoxReviewedSpotters.TopIndex = 0;
+                    }
+                }
+                ReviewedSpottersSave(true);
+            }
+            else // let's look at the QRZ page
+            {
+                    int selected = checkedListBoxNewSpotters.SelectedIndex;
+                    if (selected == -1) return;
+                    string callsign = checkedListBoxNewSpotters.Items[selected].ToString();
+                    checkedListBoxNewSpotters.SetItemChecked(selected, false);
+                    string[] tokens = callsign.Split('-');  // have to remove any suffix like this
+                    string url = "https://qrz.com/db/" + tokens[0];
+                    System.Diagnostics.Process.Start(url);
+                    return;
+            }
+        }
+
+        private void ButtonBackup_Click(object sender, EventArgs e)
+        {
+            //System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel level)
+            var userConfig = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.PerUserRoamingAndLocal).FilePath;
+            string fileName = "user.config_" + DateTime.Now.ToString("yyyy-MM-ddTHHmmss",CultureInfo.InvariantCulture); // almost ISO 8601 format but have to remove colons
+            SaveFileDialog myDialog = new SaveFileDialog
+            {
+                FileName = fileName,
+                CheckPathExists = true,
+                OverwritePrompt = true
+            };
+            if (myDialog.ShowDialog() == DialogResult.OK)
+            {
+                string myFile = myDialog.FileName;
+                System.IO.File.Copy(userConfig, myFile,true);
+            }
+            myDialog.Dispose();
+        }
+
+        private void CheckedListBoxReviewedSpotters_MouseUp(object sender, MouseEventArgs e)
+        {
+            Application.DoEvents();
+            ReviewedSpottersSave(true);
+        }
     }
 }
diff --git a/Properties/Settings.Designer.cs b/Properties/Settings.Designer.cs
index 0fb3a3b..198faf8 100644
--- a/Properties/Settings.Designer.cs
+++ b/Properties/Settings.Designer.cs
@@ -12,7 +12,7 @@ namespace W3LPL.Properties {
     
     
     [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
-    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.2.0.0")]
+    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.4.0.0")]
     internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
         
         private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
@@ -82,5 +82,17 @@ namespace W3LPL.Properties {
                 this["Size"] = value;
             }
         }
+        
+        [global::System.Configuration.UserScopedSettingAttribute()]
+        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
+        [global::System.Configuration.DefaultSettingValueAttribute("4U1UN,2;")]
+        public string ReviewedSpotters {
+            get {
+                return ((string)(this["ReviewedSpotters"]));
+            }
+            set {
+                this["ReviewedSpotters"] = value;
+            }
+        }
     }
 }
diff --git a/W3LPLClient.cs b/W3LPLClient.cs
index d6bea0d..4ef6359 100644
--- a/W3LPLClient.cs
+++ b/W3LPLClient.cs
@@ -27,12 +27,16 @@ namespace W3LPL
         public UInt64 totalLinesKept;
         private int lastMinute = 1; // for cache usage
         private readonly byte[] databuf;
+        public bool filterOn = true;
+        public List<string> callSuffixList = new List<string>();
+        public string reviewedSpotters = "";
         public W3LPLClient(string host, int port, ConcurrentBag<string> w3lplQ)
         {
             myHost = host;
             myPort = port;
             w3lplQueue = w3lplQ;
             databuf = new byte[16384 * 4];
+            callSuffixList.Add("4U1UN");
         }
 
         ~W3LPLClient()
@@ -79,8 +83,10 @@ namespace W3LPL
             try
             {
                 cache.Clear();
-                client = new TcpClient();
-                client.ReceiveTimeout = 3000;
+                client = new TcpClient
+                {
+                    ReceiveTimeout = 2000
+                };
                 client.Connect(myHost, myPort);
                 client.Client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.KeepAlive, 1);
                 nStream = client.GetStream();
@@ -89,32 +95,45 @@ namespace W3LPL
                 int loopcount = 5;
                 while (!loggedIn)
                 {
+                    Application.DoEvents();
                     int bytesRead = 0;
-                    if (nStream.DataAvailable && --loopcount > 0)
+                    if (--loopcount > 0 && nStream.DataAvailable )
                     {
                         bytesRead = nStream.Read(buffer, 0, buffer.Length);
-                        if (bytesRead == 0) return false;
-                        var response = Encoding.ASCII.GetString(buffer, 0, bytesRead);
-                        debug.AppendText(response);
-                        clientQueue.Add(response);
-                        if (response.Contains("call:") || response.Contains("callsign:"))
-                        {
-                            var msg = Encoding.ASCII.GetBytes(callsign + "\r\n");
-                            nStream.Write(msg, 0, msg.Length);
-                        }
-                        if (response.Contains(callsign + " de W3LPL"))
+                        while (bytesRead > 0)
                         {
-                            loggedIn = true;
-                            //var msg = Encoding.ASCII.GetBytes("Set Dx Filter (skimmer and unique > 2 AND spottercont=na) OR (not skimmer and spottercont=na)\n");
-                            //var msg = Encoding.ASCII.GetBytes("SET/FILTER K,VE/PASS\n");
-                            //nStream.Write(msg, 0, msg.Length);
-                            return true;
+                            var response = Encoding.ASCII.GetString(buffer, 0, bytesRead);
+                            debug.AppendText(response);
+                            clientQueue.Add(response);
+                            if (response.Contains("call:") || response.Contains("callsign:"))
+                            {
+                                var msg = Encoding.ASCII.GetBytes(callsign + "\r\n");
+                                nStream.Write(msg, 0, msg.Length);
+                            }
+                            if (response.Contains(callsign + " de W3LPL"))
+                            {
+                                loggedIn = true;
+                                //var msg = Encoding.ASCII.GetBytes("Set Dx Filter (skimmer and unique > 2 AND spottercont=na) OR (not skimmer and spottercont=na)\n");
+                                //var msg = Encoding.ASCII.GetBytes("SET/FILTER K,VE/PASS\n");
+                                //nStream.Write(msg, 0, msg.Length);
+                                return true;
+                            }
+                            bytesRead = nStream.Read(buffer, 0, buffer.Length);
                         }
                     }
+                    if (loopcount < 0)
+                    {
+                        client.Client.Shutdown(SocketShutdown.Receive);
+                        client.Close();
+                        client = null;
+                        return false;
+                    }
                     Thread.Sleep(1000);
                 }
             }
-            catch (Exception ex)
+#pragma warning disable CA1031 // Do not catch general exception types
+            catch (Exception)
+#pragma warning restore CA1031 // Do not catch general exception types
             {
                 client.Close();
                 client.Dispose();
@@ -126,9 +145,23 @@ namespace W3LPL
             return false;
         }
 
+        public bool ReviewedSpottersIsChecked(string s)
+        {
+            string check = s + ",1";
+            bool gotem = reviewedSpotters.Contains(check);
+            if (gotem && !s.Contains("W1NT-6")) 
+                return gotem;
+            return gotem;
+        }
+
+
         [System.Diagnostics.CodeAnalysis.SuppressMessage("Globalization", "CA1303:Do not pass literals as localized parameters", Justification = "<Pending>")]
         public string Get()
         {
+            if (log4omQueue.Count == 0)
+            {
+                totalLines = totalLinesKept = 0;
+            }
             if (w3lplQueue.TryTake(out string result))
             {
                 var outmsg = Encoding.ASCII.GetBytes(result);
@@ -182,7 +215,27 @@ namespace W3LPL
                             lastMinute = minute;
                         }
                         ++totalLines;
-                        if (!cache.ContainsKey(key) && !s.Contains("4U1UN"))
+                        bool filteredOut = false;
+                        string[] tokens2 = s.Split(' ');
+                        string justCall = "";
+                        if (tokens2[2].Contains("-#"))
+                        {
+                            justCall = tokens2[2].Substring(0, tokens2[2].Length - 3);
+                        }
+                        else
+                        {
+                            justCall = tokens2[2].Substring(0, tokens2[2].Length - 1);
+                        }
+                        if (ReviewedSpottersIsChecked(justCall) == false)
+                        {
+                            if (!callSuffixList.Contains(tokens2[2]))
+                            {
+                                //callSuffixList.Add(justCall);
+                                callSuffixList.Insert(0, justCall);
+                            }
+                            filteredOut = true;
+                        }
+                        if (!cache.ContainsKey(key) && !filteredOut)
                         {
                             cache[key] = minute;
                             ++totalLinesKept;
@@ -199,8 +252,13 @@ namespace W3LPL
                         {
                             if (s.Length > 2)
                             {
-                                log4omQueue.Add("**" + s.Substring(2) + "\r\n");
-                                sreturn += "**" + s.Substring(2) + "\r\n";
+                                string tag = "**";
+                                if (filteredOut)
+                                {
+                                    tag = "!!";
+                                    //log4omQueue.Add(tag + s.Substring(2) + "\r\n");
+                                }
+                                sreturn += tag + s.Substring(2) + "\r\n";
                             }
                         }
 
